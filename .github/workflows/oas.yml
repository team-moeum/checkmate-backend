name: OAS Generator

on:
  workflow_dispatch:

env:
  TARGET_REPO: team-moeum/checkmate-frontend
  TARGET_BRANCH: main
  SOURCE_BRANCH: oas-${{ github.run_number }}-${{ github.run_attempt }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  SERVICE_NAME: checkmate-backend-docs
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

jobs:
  generate-swagger:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source repository
        uses: actions/checkout@v3

      - name: Build and run application container
        run: |
          docker build \
            --build-arg DATABASE_URL=${DATABASE_URL} \
            --build-arg DATABASE_USERNAME=${DATABASE_USERNAME} \
            --build-arg DATABASE_PASSWORD=${DATABASE_PASSWORD} \
            -t swagger .

          docker run -d --network host --name ${{ env.SERVICE_NAME }} swagger

          echo "Docker container status:"
          docker ps

          echo "Waiting for application to start (30 seconds)..."
          sleep 30

      - name: Test different endpoints
        run: |
          # 컨테이너 IP 가져오기
          CONTAINER_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${{ env.SERVICE_NAME }})
          echo "container IP: $CONTAINER_IP"

          # 성공한 URL을 저장할 변수
          SUCCESS_URL=""

          echo "Testing with localhost..."
          echo "1. Testing /api-docs/json"
          if curl -s -f http://localhost:8080/api-docs/json > /dev/null; then
            SUCCESS_URL="http://localhost:8080/api-docs/json"
            echo "Success with /api-docs/json"
          fi

          echo "2. Testing /v3/api-docs/json"
          if [ -z "$SUCCESS_URL" ] && curl -s -f http://localhost:8080/v3/api-docs/json > /dev/null; then
            SUCCESS_URL="http://localhost:8080/v3/api-docs/json"
            echo "Success with /v3/api-docs/json"
          fi

          echo "3. Testing /v3/api-docs"
          if [ -z "$SUCCESS_URL" ] && curl -s -f http://localhost:8080/v3/api-docs > /dev/null; then
            SUCCESS_URL="http://localhost:8080/v3/api-docs"
            echo "Success with /v3/api-docs"
          fi

          echo "4. Testing /api-docs"
          if [ -z "$SUCCESS_URL" ] && curl -s -f http://localhost:8080/api-docs > /dev/null; then
            SUCCESS_URL="http://localhost:8080/api-docs"
            echo "Success with /api-docs"
          fi

          if [ ! -z "$CONTAINER_IP" ]; then
            echo "Testing with container IP: $CONTAINER_IP"
            echo "5. Testing /api-docs/json with container IP"
            if [ -z "$SUCCESS_URL" ] && curl -s -f http://${CONTAINER_IP}:8080/api-docs/json > /dev/null; then
              SUCCESS_URL="http://${CONTAINER_IP}:8080/api-docs/json"
              echo "Success with container IP /api-docs/json"
            fi
            
            echo "6. Testing /v3/api-docs/json with container IP"
            if [ -z "$SUCCESS_URL" ] && curl -s -f http://${CONTAINER_IP}:8080/v3/api-docs/json > /dev/null; then
              SUCCESS_URL="http://${CONTAINER_IP}:8080/v3/api-docs/json"
              echo "Success with container IP /v3/api-docs/json"
            fi

            echo "7. Testing /v3/api-docs with container IP"
            if [ -z "$SUCCESS_URL" ] && curl -s -f http://${CONTAINER_IP}:8080/v3/api-docs > /dev/null; then
              SUCCESS_URL="http://${CONTAINER_IP}:8080/v3/api-docs"
              echo "Success with container IP /v3/api-docs"
            fi

            echo "8. Testing /api-docs with container IP"
            if [ -z "$SUCCESS_URL" ] && curl -s -f http://${CONTAINER_IP}:8080/api-docs > /dev/null; then
              SUCCESS_URL="http://${CONTAINER_IP}:8080/api-docs"
              echo "Success with container IP /api-docs"
            fi
          fi

          # 성공한 URL 저장
          echo "SWAGGER_URL=$SUCCESS_URL"
          if [ -z "$SWAGGER_URL" ]; then
            echo "No successful endpoint found"
            exit 1
          fi

          echo "Downloading from successful endpoint: $SWAGGER_URL"
          curl -f $SWAGGER_URL > swagger.json

      - name: Stop container
        if: always()
        run: docker stop ${{ env.SERVICE_NAME }} || true

      - name: Checkout target repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.TARGET_REPO }}
          token: ${{ env.PERSONAL_ACCESS_TOKEN }}
          path: target-repo

      - name: Create Pull Request
        run: |
          cd target-repo
          git config --local user.email "moeum[bot]@users.noreply.github.com"
          git config --local user.name "moeum[bot]"

          git checkout -b ${{ env.SOURCE_BRANCH }}
          cp ../swagger.json ./swagger.json
          git add swagger.json
          git commit -m "Update swagger.json"
          git push origin ${{ env.SOURCE_BRANCH }}

          # 변경사항이 있는지 확인
          if ! git diff --quiet; then
            git add swagger.json
            git commit -m "Update swagger.json"
            git push origin ${{ env.SOURCE_BRANCH }}

            curl -X POST \
              -H "Authorization: token ${{ env.PERSONAL_ACCESS_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ env.TARGET_REPO }}/pulls \
              -d '{
                "title": "Update Swagger JSON",
                "body": "Automatically generated Swagger JSON update\n\nGenerated by workflow run #${{ github.run_number }}",
                "head": "${{ env.SOURCE_BRANCH }}",
                "base": "${{ env.TARGET_BRANCH }}"
              }'
          else
            echo "No changes in swagger.json"
          fi
